/*
 * This file adds most other numerical casts.  We do this a bit simpler than
 * the Unit to Unit and Double <-> Unit casts.
 * Further, because there are so many of them unfortunately, this needs to be
 * templated to be done reasonably.
 * Doing this using the c.src mechanism, e.g. C++ function templating would
 * certainly also work fine.
 *
 * For example, these casts only cast to an unscaled dimensionless.  If
 * a scaled dimensionless would be needed for whatever reasons, the cast
 * would be chained by NumPy with a normal Unit to Unit cast.
 * (similarly for unaligned data.)
 *
 * TODO: I may consider creating helpers similar to the wrapping for ufuncs
 *       here.  Since this basically duplicates NumPy's casting code.
 *       I may also allow "casts" that only resolve to a "wrong" descriptor
 *       but provide no inner-loop.
 *
 *       I.e. their resolve_descriptors would return `double` for the _other_
 *       dtype.  double <-> is just a view then.  Then this can be chained
 *       with the actual cast function (completely ignoring this step).
 *
 *       This is de-facto possible already, but it would do an unnecessary
 *       copying step.
 *       It would also be nice to do this, because than behaviour changes in
 *       NumPy could directly be reflected here.
 */

#include <Python.h>

#define PY_ARRAY_UNIQUE_SYMBOL unitdtype_ARRAY_API
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#define NO_IMPORT_ARRAY
#include "numpy/arrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/experimental_dtype_api.h"

#include "casts.h"


/*
 * NumPy currently forces us to provide this, because our dtype is parametric.
 * However, it is actually super trivial.
 * (All of these casts are considered safe.)
 */
static NPY_CASTING
generic_to_unit_resolve_descriptors(
        PyObject *NPY_UNUSED(self),
        PyArray_DTypeMeta *dtypes[2],
        PyArray_Descr *NPY_UNUSED(given_descrs[2]),
        PyArray_Descr *loop_descrs[2],
        npy_intp *NPY_UNUSED(view_offset))
{
    Py_INCREF(dtypes[0]->singleton);
    loop_descrs[0] = dtypes[0]->singleton;
    Py_INCREF(dtypes[1]->singleton);
    loop_descrs[1] = dtypes[1]->singleton;
    return NPY_SAFE_CASTING;
}


/**begin repeat
 * #other = Bool,
 *          UByte, UShort, UInt, ULong, ULongLong,
 *          Byte, Short, Int, Long, LongLong,
 *          Float#
 * #type  = npy_bool,
 *          npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *          npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *          npy_float#
 */
#define is_@other@ 1

/**begin repeat1
 * #contig = 0, 1#
 * #contig_name = strided, contig#
 * #UNROLL = , __attribute__((optimize("unroll-loops")))#
 */

#ifndef is_Bool  /* We already made a unit -> bool loop in casts.c */

static __attribute__((optimize("O3"))) @UNROLL@ int
cast_unit_to_@other@_@contig_name@(PyArrayMethod_Context *NPY_UNUSED(context),
        char *const data[], npy_intp const dimensions[],
        npy_intp const strides[], NpyAuxData *NPY_UNUSED(auxdata))
{
    npy_intp N = dimensions[0];
    char *in = data[0];
    char *out = data[1];
#if !@contig@
    npy_intp in_stride = strides[0];
    npy_intp out_stride = strides[1];
#endif

    while (N--) {
        *(@type@ *)out = *(double *)in;
#if @contig@
        out += sizeof(@type@);
        in += sizeof(double);
#else
        out += in_stride;
        in += out_stride;
#endif
    }
    return 0;
}

#endif  /* is_Bool */


static __attribute__((optimize("O3"))) int
cast_@other@_to_unit_@contig_name@(PyArrayMethod_Context *NPY_UNUSED(context),
        char *const data[], npy_intp const dimensions[],
        npy_intp const strides[], NpyAuxData *NPY_UNUSED(auxdata))
{
    npy_intp N = dimensions[0];
    char *in = data[0];
    char *out = data[1];
#if !@contig@
    npy_intp in_stride = strides[0];
    npy_intp out_stride = strides[1];
#endif

    while (N--) {
        *(double *)out = (double)*(@type@ *)in;
#if @contig@
        out += sizeof(double);
        in += sizeof(@type@);
#else
        out += in_stride;
        in += out_stride;
#endif
    }
    return 0;
}


/**end repeat1**/

/*
 * We created all loops, now create the actual cast info/spec:
 */

#ifndef is_Bool  /* We already made a unit -> bool loop in casts.c */

static PyArray_DTypeMeta *u2@other@_dtypes[2] = {NULL, NULL};

static PyType_Slot u2@other@_slots[] = {
    {NPY_METH_contiguous_loop, &cast_unit_to_@other@_contig},
    {NPY_METH_strided_loop, &cast_unit_to_@other@_strided},
    {0, NULL}
};

PyArrayMethod_Spec UnitTo@other@CastSpec = {
    .name = "cast_Unit_to_@other@",
    .nin = 1,
    .nout = 1,
    .casting = NPY_UNSAFE_CASTING,
    .dtypes = u2@other@_dtypes,
    .slots = u2@other@_slots,
};

#endif  /* is_Bool */


static PyArray_DTypeMeta *@other@2u_dtypes[2] = {NULL, NULL};

static PyType_Slot @other@2u_slots[] = {
    {NPY_METH_resolve_descriptors, &generic_to_unit_resolve_descriptors},
    {NPY_METH_contiguous_loop, &cast_@other@_to_unit_contig},
    {NPY_METH_strided_loop, &cast_@other@_to_unit_strided},
    {0, NULL}
};

PyArrayMethod_Spec @other@ToUnitCastSpec = {
    .name = "cast_@other@_to_Unit",
    .nin = 1,
    .nout = 1,
    .casting = NPY_UNSAFE_CASTING,
    .dtypes = @other@2u_dtypes,
    .slots = @other@2u_slots,
};

#undef is_@other@

/**end repeat**/
/* ... */
